!java.util.LinkedHashMap
tosca_definitions_version: tosca_simple_yaml_1_0
description: This TOSCA definitions document contains the custom types definitions as expressed in the
   TOSCA specification document. It is composed by the files in the directory custom-types
node_types: 
   tosca.nodes.ComputeWithProp: 
      derived_from: tosca.nodes.Compute
      description: Compute node type with a parameter for the get property with host test
      properties: 
         test: 
            type: integer
            required: false
   tosca.nodes.WebApplication.PayPalPizzaStore: 
      requirements: 
      -  database_connection: 
            node: tosca.nodes.Database
            capability: tosca.capabilities.Endpoint.Database
            relationship: tosca.relationships.ConnectsTo
      interfaces: 
         Standard: 
            configure: 
               inputs: 
                  github_url: 
                     type: string
                  mongodb_ip: 
                     type: string
      derived_from: tosca.nodes.WebApplication
      description: Pizza store app that allows you to explore the features provided by PayPal's REST APIs.
         More detail can be found at https://github.com/paypal/rest-api-sample-app-nodejs/
      properties: 
         github_url: 
            default: https://github.com/sample.git
            description: location of the application on the github.
            type: string
            required: false
   tosca.nodes.Mongod: 
      requirements: 
      -  host: 
            occurrences: 
            - '1'
            - '1'
            node: tosca.nodes.Compute
            capability: tosca.capabilities.Container
            node_filter: 
               capabilities: 
               -  tosca.capabilities.OperatingSystem: 
                     properties: 
                     -  type: 
                           equal: linux
                     -  architecture: 
                           equal: x86_64
                     -  distribution: 
                           valid_values: 
                           - debian
                           - ubuntu
                           - knoppix
            relationship: tosca.relationships.HostedOn
      metadata: 
         icon: /images/mongodb.jpg
      interfaces: 
         Standard: 
            stop: scripts/stop-mongo.sh
            start: scripts/start-mongo.sh
            create: scripts/install-mongo.sh
            configure: 
               inputs: 
                  DB_IP: 
                     get_attribute: 
                     - HOST
                     - ip_address
                  DB_PORT: 
                     get_property: 
                     - SELF
                     - port
               implementation: scripts/configure-mongo.sh
      derived_from: tosca.nodes.AbstractMongod
      description: A node to install Mongodb nosql database.
   tosca.nodes.network.Network: 
      derived_from: tosca.nodes.Root
      properties: 
         physical_network: 
            type: string
            required: false
         segmentation_id: 
            type: string
            required: false
         network_id: 
            type: string
            required: false
         ip_version: 
            default: IPv4
            type: string
            constraints: 
            -  valid_values: 
               - IPv4
               - IPv6
            required: false
         start_ip: 
            type: string
            required: false
         network_name: 
            type: string
            required: false
         cidr: 
            type: string
            required: false
         gateway_ip: 
            type: string
            required: false
         network_type: 
            type: string
            required: false
         end_ip: 
            type: string
            required: false
   tosca.nodes.Nodejs: 
      metadata: 
         icon: /images/nodejs.jpg
      interfaces: 
         Standard: 
            create: 
               inputs: 
                  COMPONENT_VERSION: 
                     get_property: 
                     - SELF
                     - component_version
               implementation: scripts/install-nodejs.sh
      capabilities: 
         host: tosca.capabilities.NodeJSAppContainer
      derived_from: tosca.nodes.WebServer
      description: The TOSCA Nodejs Node Type represents an Nodejs component that can be managed and run
         by a TOSCA Compute Node Type.
      properties: 
         component_version: 
            default: '0.12'
            description: "The optional software component\u2019s version."
            type: version
            required: false
   tosca.nodes.Container.Application.Docker: 
      requirements: 
      -  host: 
      capability: tosca.capabilities.Container.Docker
      derived_from: tosca.nodes.Container.Application
   tosca.nodes.SoftwareComponent.Kibana: 
      requirements: 
      -  search_endpoint: 
            node: tosca.nodes.SoftwareComponent.Elasticsearch
            capability: tosca.capabilities.Endpoint
            relationship: tosca.relationships.ConnectsTo
      derived_from: tosca.nodes.SoftwareComponent
      description: Kibana is an open source analytics and visualization platform designed to work with
         Elasticsearch. You use Kibana to search, view, and interact with data stored in Elasticsearch.
   tosca.nodes.ComputeWithAttrList: 
      derived_from: tosca.nodes.Compute
      description: Compute node type with a list attribute
      attributes: 
         attr_list: 
            entry_schema: 
               type: string
            type: map
   tosca.nodes.SoftwareComponent.Logstash: 
      requirements: 
      -  search_endpoint: 
            node: tosca.nodes.SoftwareComponent.Elasticsearch
            capability: tosca.capabilities.Endpoint
            relationship: 
               interfaces: 
                  Configure: 
                     pre_configure_source: 
                        inputs: 
                           elasticsearch_ip: 
                              type: string
               type: tosca.relationships.ConnectsTo
      capabilities: 
         log_endpoint: 
            type: tosca.capabilities.Endpoint
      derived_from: tosca.nodes.SoftwareComponent
      description: Logstash is a tool for receiving, processing and outputting logs. All kinds of logs.
         System logs, webserver logs, error logs, application logs, and just about anything you can throw
         at it.
   example.DatabaseSubsystem: 
      capabilities: 
         database_endpoint: 
            type: tosca.capabilities.Endpoint.Database
      derived_from: tosca.nodes.Root
   tosca.nodes.SoftwareComponent.Collectd: 
      requirements: 
      -  log_endpoint: 
            node: tosca.nodes.SoftwareComponent.Logstash
            capability: tosca.capabilities.Endpoint
            relationship: tosca.relationships.ConnectsTo
      derived_from: tosca.nodes.SoftwareComponent
      description: collectd is a daemon which gathers statistics about the system it is running on.
   tosca.nodes.NodeWithReq: 
      requirements: 
      -  host: 
            occurrences: 
            - '1'
            - '1'
            capability: tosca.capabilities.SomeCap
            relationship: tosca.relationships.HostedOn
      derived_from: tosca.nodes.SoftwareComponent
   tosca.nodes.SomeNode2: 
      requirements: 
      -  host: 
            node: tosca.nodes.Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities: 
         host_child: 
            type: tosca.capabilities.ContainerChild
      derived_from: tosca.nodes.Root
   tosca.nodes.AbstractMongod: 
      metadata: 
         icon: /images/mongodb.jpg
      derived_from: tosca.nodes.DBMS
      abstract: true
      properties: 
         port: 
            default: '27017'
            type: integer
            constraints: 
            -  in_range: 
               - '8000'
               - '65535'
   tosca.nodes.PHP: 
      metadata: 
         icon: /images/php.png
      requirements: 
      -  host: 
            occurrences: 
            - '1'
            - '1'
            node: tosca.nodes.Compute
            capability: tosca.capabilities.Container
            node_filter: 
               capabilities: 
               -  tosca.capabilities.OperatingSystem: 
                     properties: 
                     -  type: 
                           equal: linux
                     -  architecture: 
                           equal: x86_64
                     -  distribution: 
                           valid_values: 
                           - debian
                           - ubuntu
                           - knoppix
            relationship: tosca.relationships.HostedOn
      interfaces: 
         Standard: 
            create: scripts/install_php.sh
      capabilities: 
         attachWebsite: 
            type: tosca.capabilities.Root
      derived_from: tosca.nodes.SoftwareComponent
      description: PHP install through apt-get.
      properties: 
         component_version: 
            default: '5'
            type: version
            constraints: 
            -  equal: '5'
   tosca.nodes.Database.MySQL: 
      requirements: 
      -  host: 
            node: tosca.nodes.DBMS.MySQL
      derived_from: tosca.nodes.Database
   example.QueuingSubsystem: 
      requirements: 
      -  receiver: 
            node: example.TransactionSubsystem
            capabilities: tosca.capabilities.Endpoint
      capabilities: 
         message_queue_endpoint: 
            type: tosca.capabilities.Endpoint
      derived_from: tosca.nodes.Root
   example.TransactionSubsystem: 
      requirements: 
      -  database_endpoint: tosca.capabilities.Endpoint.Database
      capabilities: 
         message_receiver: tosca.capabilities.Endpoint
      derived_from: tosca.nodes.Root
      attributes: 
         receiver_port: 
            type: integer
         receiver_ip: 
            type: string
      properties: 
         receiver_port: 
            type: integer
         mq_service_ip: 
            type: string
   tosca.nodes.Mysql: 
      requirements: 
      -  host: 
            occurrences: 
            - '1'
            - '1'
            node: tosca.nodes.Compute
            capability: tosca.capabilities.Container
            node_filter: 
               capabilities: 
               -  tosca.capabilities.OperatingSystem: 
                     properties: 
                     -  type: 
                           equal: linux
                     -  architecture: 
                           equal: x86_64
                     -  distribution: 
                           valid_values: 
                           - debian
                           - ubuntu
                           - knoppix
            relationship: tosca.relationships.HostedOn
      interfaces: 
         Standard: 
            start: 
               inputs: 
                  PORT: 
                     get_property: 
                     - SELF
                     - port
                  DB_USER: 
                     get_property: 
                     - SELF
                     - db_user
                  BIND_ADDRESS: 
                     get_property: 
                     - SELF
                     - bind_address
                  VOLUME_HOME: 
                     get_property: 
                     - SELF
                     - storage_path
                  DB_NAME: 
                     get_property: 
                     - SELF
                     - name
                  DB_PASSWORD: 
                     get_property: 
                     - SELF
                     - db_password
               implementation: scripts/start_mysql.sh
            create: scripts/install_mysql.sh
      derived_from: tosca.nodes.AbstractMysql
      description: A node that represent MySQL database with data on a attached volume.
      properties: 
         port: 
            default: '3306'
            description: The port on which the database will listen to data.
            type: integer
         storage_path: 
            default: /mountedStorage
            type: string
            constraints: 
            -  valid_values: 
               - /mountedStorage
               - /var/mysql
         db_user: 
            default: pass
            description: The user account used for database administration.
            type: string
         name: 
            default: wordpress
            description: The logical name of the database.
            type: string
            required: true
         bind_address: 
            default: true
            description: If true,the server accepts TCP/IP connections on all server host IPv4 interfaces.
            type: boolean
            required: false
         db_password: 
            default: pass
            description: The password associated with the user account for database administration.
            type: string
      artifacts: 
      -  configs: 
            file: configs
            type: tosca.artifacts.File
   tosca.nodes.SoftwareComponent.Elasticsearch: 
      capabilities: 
         search_endpoint: 
            type: tosca.capabilities.Endpoint
      derived_from: tosca.nodes.SoftwareComponent
      description: Elasticsearch is an open-source search engine built on top of Apache Lucene, a full-text
         search-engine library.
   tosca.nodes.DatabaseWithListParam: 
      derived_from: tosca.nodes.Database
      properties: 
         list_prop: 
            entry_schema: integer
            type: list
   example.SomeApp: 
      requirements: 
      -  database: 
            capability: tosca.capabilities.Endpoint.Database
      -  host: 
            node: tosca.nodes.WebServer
      capabilities: 
         message_receiver: tosca.capabilities.Endpoint
      derived_from: tosca.nodes.Root
      description: taken from tosca-topologies/Example18-ImplementationOfATransactionSubsytemNodeTypeUsingSubstitutionMappings
   tosca.nodes.Nodecellar: 
      metadata: 
         icon: /images/nodecellar.jpg
      requirements: 
      -  host: 
            capability: tosca.capabilities.NodeJSAppContainer
            relationship: tosca.relationships.NodecellarHostedOnNodejs
      -  database: 
            occurrences: 
            - '1'
            - '1'
            capability: tosca.capabilities.Endpoint.Database
            relationship: tosca.relationships.NodejsConnectToMongo
      interfaces: 
         Standard: 
            stop: scripts/stop-nodecellar-app.sh
            start: scripts/start-nodecellar-app.sh
            create: scripts/install-nodecellar-app.sh
      derived_from: tosca.nodes.WebApplication
      description: The TOSCA Nodecellar Node Type represents a Nodecellar Application.
      attributes: 
         nodecellar_url: http://nodecellar.example:8088
      properties: 
         port: 
            default: '8088'
            type: integer
   tosca.nodes.AbstractMysql: 
      capabilities: 
         database_endpoint: tosca.capabilities.Endpoint.Database
      derived_from: tosca.nodes.Database
      description: A node that provides a mysql endpoint.
      abstract: true
   tosca.nodes.NodeWithCap: 
      capabilities: 
         some_req: 
            type: tosca.capabilities.SomeCap
      derived_from: tosca.nodes.Root
   tosca.nodes.Apache: 
      interfaces: 
         Standard: 
            start: scripts/start_apache.sh
            create: 
               inputs: 
                  PORT: 
                     get_property: 
                     - SELF
                     - port
                  DOC_ROOT: 
                     get_property: 
                     - SELF
                     - document_root
               implementation: scripts/install_apache.sh
      capabilities: 
         host: tosca.capabilities.Container
      derived_from: tosca.nodes.WebServer
      description: The TOSCA Apache Node Type represents an apache component that can be managed and run
         by a TOSCA Compute Node Type.
      properties: 
         port: 
            default: '80'
            description: Port for the Apache server
            type: integer
            constraints: 
            -  greater_or_equal: '1'
         document_root: 
            default: /var/www
            type: string
         component_version: 
            default: '2.4'
            type: version
            constraints: 
            -  equal: '2.4'
   Rsyslog: 
      requirements: 
      -  log_endpoint: 
            node: tosca.nodes.SoftwareComponent.Logstash
            capability: tosca.capabilities.Endpoint
            relationship: tosca.relationships.ConnectsTo
      derived_from: tosca.nodes.SoftwareComponent
      description: RSYSLOG is the Rocket-fast SYStem for LOG processing.
   tosca.nodes.Wordpress: 
      requirements: 
      -  host: 
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      -  database: 
            occurrences: 
            - '1'
            - '1'
            capability: tosca.capabilities.MysqlDatabaseEndpoint
            relationship: tosca.capabilities.Endpoint.Database
      -  php: 
            occurrences: 
            - '1'
            - '1'
            capability: tosca.capabilities.Root
            relationship: tosca.relationships.ConnectsTo
      interfaces: 
         Standard: 
            create: 
               inputs: 
                  WEBFILE_URL: 
                     get_property: 
                     - SELF
                     - zip_url
               implementation: scripts/install_wordpress.sh
      derived_from: tosca.nodes.WebApplication
      description: The TOSCA Wordpress Node Type represents a Wordpress CMS.
      attributes: 
         max_user_number: 
            default: '10'
            description: Max user number
            type: integer
      properties: 
         context_root: 
            default: /
            type: string
         zip_url: 
            default: https://wordpress.org/latest.zip
            type: string
   tosca.nodes.network.Port: 
      requirements: 
      -  link: 
            capability: tosca.capabilities.network.Linkable
            relationship: tosca.relationships.network.LinksTo
      -  binding: 
            capability: tosca.capabilities.network.Bindable
            relationship: tosca.relationships.network.BindsTo
      derived_from: tosca.nodes.Root
      properties: 
         ip_range_end: 
            type: string
            required: false
         ip_range_start: 
            type: string
            required: false
         ip_address: 
            type: string
            required: false
         is_default: 
            default: false
            type: boolean
            required: false
         order: 
            default: '0'
            type: integer
            constraints: 
            -  greater_or_equal: '0'
            required: true
   tosca.nodes.ComputeWithCapWithAttr: 
      capabilities: 
         endpoint: 
            type: tosca.capabilities.indigo.Endpoint
      derived_from: tosca.nodes.Compute
      description: Compute node type with capability with an attribute of type list
   tosca.nodes.SoftwareComponent.Rsyslog: 
      requirements: 
      -  log_endpoint: 
            node: tosca.nodes.SoftwareComponent.Logstash
            capability: tosca.capabilities.Endpoint
            relationship: tosca.relationships.ConnectsTo
      derived_from: tosca.nodes.SoftwareComponent
      description: RSYSLOG is the Rocket-fast SYStem for LOG processing.
   tosca.nodes.HACompute: 
      requirements: 
      -  high_availability: 
            node: tosca.nodes.HACompute
            capability: tosca.capabilities.HA
            occurences: 
            - '0'
            - '1'
            relationship: tosca.relationships.HA
      capabilities: 
         high_availability: 
            type: tosca.capabilities.HA
      derived_from: tosca.nodes.Compute
   tosca.nodes.SomeNode: 
      capabilities: 
         lrms: 
            type: tosca.capabilities.SomeChildCap
      derived_from: tosca.nodes.Root
      description: A node with a capiblity and a parent capability defined in an imported file
   tosca.nodes.DBMS.MySQL: 
      capabilities: 
         host: 
            valid_source_types: 
            - tosca.nodes.Database.MySQL
      derived_from: tosca.nodes.DBMS
      properties: 
         port: 
            default: '3306'
            description: reflect the default MySQL server port
         root_password: 
            required: true
capability_types: 
   tosca.capabilities.ContainerChild: 
      derived_from: tosca.capabilities.Container
      description: Define a capability class that inherits from tosca.capabilities.Container
   tosca.capabilities.SomeCap: 
      derived_from: tosca.capabilities.Root
   tosca.capabilities.indigo.Endpoint: 
      derived_from: tosca.capabilities.Endpoint
      attributes: 
         credential: 
            entry_schema: tosca.datatypes.Credential
            type: list
   tosca.capabilities.HA: 
      valid_source_types: 
      - tosca.nodes.HACompute
      derived_from: tosca.capabilities.Root
   tosca.capabilities.NodeJSAppContainer: 
      derived_from: tosca.capabilities.Container
   tosca.capabilities.Container.Docker: 
      derived_from: tosca.capabilities.Container
      properties: 
         publish_all: 
            default: false
            type: boolean
            required: false
         publish_ports: 
            entry_schema: PortSpec
            type: list
            required: false
         expose_ports: 
            entry_schema: PortSpec
            type: list
            required: false
         volumes: 
            entry_schema: string
            type: list
         version: 
            entry_schema: version
            type: list
            required: false
   tosca.capabilities.SomeChildCap: 
      derived_from: tosca.capabilities.SomeCap
relationship_types: 
   tosca.relationships.NodecellarHostedOnNodejs: 
      valid_target_types: 
      - tosca.capabilities.Container
      derived_from: tosca.relationships.HostedOn
      description: Relationship use to describe that the website is deployed on the target nodejs server.
   tosca.relationships.HA: 
      valid_target_types: 
      - tosca.capabilities.HA
      derived_from: tosca.relationships.Root
   MyAttachesTo: 
      derived_from: tosca.relationships.AttachesTo
      description: taken from tosca-topologies/BlockStorage4
      properties: 
         location: 
            default: /default_location
            type: string
   tosca.relationships.NodejsConnectToMongo: 
      interfaces: 
         Configure: 
            pre_configure_source: 
               inputs: 
                  DB_IP: 
                     get_attribute: 
                     - TARGET
                     - ip_address
                  DB_PORT: 
                     get_property: 
                     - TARGET
                     - port
                  NODECELLAR_PORT: 
                     get_property: 
                     - SOURCE
                     - port
               implementation: scripts/set-mongo-url.sh
      valid_target_types: 
      - tosca.capabilities.Endpoint.Database
      derived_from: tosca.relationships.ConnectsTo
      description: Relationship use to connect nodejs with a mongodb databse
   tosca.relationships.network.LinksTo: 
      valid_target_types: 
      - tosca.capabilities.network.Linkable
      derived_from: tosca.relationships.DependsOn
   test.relation.connects: 
      derived_from4: tosca.relationships.ConnectsTo
   tosca.relationships.network.BindsTo: 
      valid_target_types: 
      - tosca.capabilities.network.Bindable
      derived_from: tosca.relationships.DependsOn
policy_types: 
   mycompany.mytypes.myScalingPolicy: 
      derived1_from: tosca.policies.Scaling
      metadata: 
         entry_schema: 
            type: string
         type: map
